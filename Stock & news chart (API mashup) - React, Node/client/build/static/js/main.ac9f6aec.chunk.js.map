{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","search","setSearch","data","setData","e","a","preventDefault","fetch","response","json","console","log","info","chartseries","bars","chartoptions","chart","type","height","title","text","align","xaxis","yaxis","tooltip","enabled","dataLabels","annotations","points","news","className","placeholder","onChange","target","value","onClick","handleSubmit","id","options","series","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uNAqEeA,MAhEf,WAAe,MAGeC,mBAAS,IAHxB,mBAGNC,EAHM,KAGEC,EAHF,OAKWF,mBAAS,IALpB,mBAKNG,EALM,KAKAC,EALA,iDAOb,WAA4BC,GAA5B,eAAAC,EAAA,6DACED,EAAEE,iBADJ,SAEuBC,MALH,cAKuBP,GAF3C,cAEMQ,EAFN,YAGEL,EAHF,SAGgBK,EAASC,OAHzB,kCAIEC,QAAQC,IAPU,cAOQX,GAC1BU,QAAQE,KAAKV,GALf,6CAPa,sBAeb,IAAIW,EAAc,CAAC,CACjBX,KAAMA,EAAKY,OAGTC,EAAe,CACjBC,MAAO,CACLC,KAAM,cACNC,OAAQ,KAEVC,MAAO,CACLC,KAAM,oBACNC,MAAO,QAETC,MAAO,CACLL,KAAM,YAERM,MAAO,CACLC,QAAS,CACPC,SAAS,IAGbC,WAAY,CACVD,SAAS,GAEXE,YAAa,CACXC,OACE1B,EAAK2B,OAIX,OACE,6BACE,yBAAKC,UAAU,WACb,wCAGF,0BAAMA,UAAU,SACd,2BAAOb,KAAK,OAAOc,YAAY,WAAWC,SAAU,SAAC5B,GAAD,OAAOH,EAAUG,EAAE6B,OAAOC,UAE9E,2BAAOjB,KAAK,SAASiB,MAAM,SAASC,QAAS,SAAC/B,GAAD,OAtDtC,2CAsD6CgC,CAAahC,OAEnE,yBAAKiC,GAAG,SACG,IAARnC,EAAa,kBAAoB,kBAAC,IAAD,CAAgBoC,QAASvB,EAAcwB,OAAQ1B,EAAaI,KAAK,cAAcC,OAAQ,SClD7GsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,a","file":"static/js/main.ac9f6aec.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport ReactApexChart from 'react-apexcharts';\r\n\r\n\r\nfunction App() {\r\n  // const [search, setSearch] = useState(\"\");\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n  const urloriginal = \"/chartdata/\";\r\n  const [data, setData] = useState(\"\");\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    let response = await fetch(urloriginal + search);\r\n    setData(await response.json());\r\n    console.log(urloriginal + search);\r\n    console.info(data)\r\n  }\r\n\r\n  var chartseries = [{\r\n    data: data.bars\r\n  }];\r\n\r\n  var chartoptions = {\r\n    chart: {\r\n      type: 'candlestick',\r\n      height: 350\r\n    },\r\n    title: {\r\n      text: 'CandleStick Chart',\r\n      align: 'left'\r\n    },\r\n    xaxis: {\r\n      type: 'datetime'\r\n    },\r\n    yaxis: {\r\n      tooltip: {\r\n        enabled: true\r\n      }\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    annotations: {\r\n      points:\r\n        data.news\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"heading\">\r\n        <h1>Newsify</h1>\r\n      </div>\r\n\r\n      <form className=\"field\">\r\n        <input type=\"text\" placeholder=\"search..\" onChange={(e) => setSearch(e.target.value)} />\r\n\r\n        <input type=\"submit\" value=\"Search\" onClick={(e) => handleSubmit(e)} />\r\n      </form>\r\n      <div id=\"chart\">\r\n        {data == \"\" ? \"nothing to show\" : <ReactApexChart options={chartoptions} series={chartseries} type=\"candlestick\" height={800} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}